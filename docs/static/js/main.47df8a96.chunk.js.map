{"version":3,"sources":["Excel/Helpers/types.js","Excel/Helpers/MakeColumns.js","Excel/Helpers/HookExcelReader.js","Excel/Excel.js","App.js","index.js"],"names":["map","x","join","make_cols","refstr","o","C","XLSX","utils","decode_range","e","c","i","name","encode_col","key","HookExcelReader","useState","file","data","cols","setData","htmlFor","type","className","id","accept","SheetJSFT","onChange","files","target","value","onClick","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","bookVBA","wsname","SheetNames","ws","Sheets","dataReaded","sheet_to_json","readAsArrayBuffer","console","log","Excel","App","ReactDOM","render","document","getElementById"],"mappings":"0EAAkB,CACjB,OAAQ,OAAQ,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAC1IA,KAAI,SAASC,GAAK,MAAO,IAAMA,KAAMC,KAAK,M,uICA/BC,EAAY,SAAAC,GAExB,IADA,IAAIC,EAAI,GAAIC,EAAIC,IAAKC,MAAMC,aAAaL,GAAQM,EAAEC,EAAI,EAC9CC,EAAI,EAAGA,EAAIN,IAAKM,EAAGP,EAAEO,GAAK,CAACC,KAAKN,IAAKC,MAAMM,WAAWF,GAAIG,IAAIH,GACtE,OAAOP,G,eC+DOW,EA7DS,WAEpB,MAAwBC,mBAAS,CAE7BC,KAAM,GACNC,KAAM,GACNC,KAAM,KAJV,mBAAOD,EAAP,KAAaE,EAAb,KA2CA,OACI,gCACG,uBAAOC,QAAQ,OAAf,kMAGC,uBAAM,uBACN,uBAAOC,KAAK,OAAOC,UAAU,eAAeC,GAAG,OAAOC,OAAQC,YAAWC,SA1C7D,SAAClB,GACjB,IAAMmB,EAAQnB,EAAEoB,OAAOD,MACnBA,GAASA,EAAM,IAAIR,EAAQ,2BAAIF,GAAL,IAAWD,KAAMW,EAAM,SAyCjD,uBAAM,uBACN,uBAAON,KAAK,SACZQ,MAAM,mBACNC,QAzCW,SAACtB,GAEhB,IAAMuB,EAAS,IAAIC,WACbC,IAASF,EAAOG,mBAEtBH,EAAOI,OAAS,SAAC3B,GAEb,IAAM4B,EAAO5B,EAAEoB,OAAOS,OAChBC,EAAKjC,IAAKkC,KAAKH,EAAM,CAAEf,KAAMY,EAAO,SAAW,QAASO,SAAU,IAElEC,EAASH,EAAGI,WAAW,GACvBC,EAAKL,EAAGM,OAAOH,GAEfI,EAAaxC,IAAKC,MAAMwC,cAAcH,GAE5CxB,EAAQ,2BAAMF,GAAP,IAAaA,KAAM4B,EAAY3B,KAAMjB,EAAU0C,EAAG,aAIzDV,EACAF,EAAOG,mBAAmBjB,EAAKD,MAE/Be,EAAOgB,kBAAkB9B,EAAKD,SAUlC,IAS4B,uBAAM,uBAC9B,wBAAQc,QAfO,WACnBkB,QAAQC,IAAKhC,EAAKA,OAcd,qCCrDGiC,EATD,WAEV,OACI,8BACI,cAAC,EAAD,OCGGC,MANf,WACE,OACE,cAAC,EAAD,KCEJC,IAASC,OAER,cAAC,EAAD,IAEDC,SAASC,eAAe,U","file":"static/js/main.47df8a96.chunk.js","sourcesContent":["const SheetJSFT = [\r\n\t\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"\r\n].map(function(x) { return \".\" + x; }).join(\",\");","import XLSX from 'xlsx';\r\n/* generate an array of column objects */\r\nexport const make_cols = refstr => {\r\n\tlet o = [], C = XLSX.utils.decode_range(refstr).e.c + 1;\t\t\r\n\tfor(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\t\t\t\r\n\treturn o;\r\n};","import React, { useEffect, useState } from 'react';\r\nimport { Fabric } from 'office-ui-fabric-react/lib/Fabric';\r\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport XLSX from 'xlsx';\r\nimport { make_cols } from './MakeColumns';\r\nimport { SheetJSFT } from './types';\r\n\r\nconst HookExcelReader = () => {\r\n\r\n    const [data, setData] = useState({\r\n\r\n        file: {},\r\n        data: [],\r\n        cols: []\r\n    })\r\n     \r\n   const handleChange = (e) => {\r\n        const files = e.target.files;\r\n        if (files && files[0]) setData({...data, file: files[0] });        \r\n    }\r\n   \r\n    const handleFile = (e) => {\r\n       \r\n        const reader = new FileReader();\r\n        const rABS = !!reader.readAsBinaryString;\r\n \r\n        reader.onload = (e) => {\r\n        \r\n            const bstr = e.target.result;\r\n            const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA : true });\r\n            \r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            \r\n            const dataReaded = XLSX.utils.sheet_to_json(ws);    \r\n                        \r\n            setData( { ...data, data: dataReaded, cols: make_cols(ws['!ref']) } );  \r\n\r\n        };\r\n        \r\n        if (rABS) {\r\n            reader.readAsBinaryString(data.file);       \r\n        } else {\r\n            reader.readAsArrayBuffer(data.file);\r\n        };\r\n         \r\n    }\r\n\r\n    const handleShowData = () => {\r\n        console.log( data.data )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n           <label htmlFor=\"file\">Upload a file: Supported extensions \r\n           \"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"\r\n           </label>\r\n            <br /><br />\r\n            <input type=\"file\" className=\"form-control\" id=\"file\" accept={SheetJSFT} onChange={handleChange} />\r\n            <br /><br />\r\n            <input type='submit' \r\n            value=\"Process Triggers\"\r\n            onClick={handleFile} /> <br /><br />\r\n            <button onClick={handleShowData}>ShowData in Console</button>\r\n          </div>\r\n    )\r\n}\r\n\r\nexport default HookExcelReader\r\n","import HookExcelReader from './Helpers/HookExcelReader';\r\nconst Excel = () => {\r\n    \r\n    return (\r\n        <div>            \r\n            <HookExcelReader />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Excel\r\n","import Excel from './Excel/Excel';\n\nfunction App() {\n  return (\n    <Excel />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\nReactDOM.render(\n  \n <App />,\n\ndocument.getElementById('root')\n);\n\n\n\n\n"],"sourceRoot":""}